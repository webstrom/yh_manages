{"version":3,"file":"js/1.js","sources":["webpack:///public/index/js/excel/Blob.js","webpack:///public/index/js/excel/Export2Excel.js"],"sourcesContent":["/* eslint-disable */\r\n/* Blob.js\r\n * A Blob implementation.\r\n * 2014-05-27\r\n *\r\n * By Eli Grey, http://eligrey.com\r\n * By Devin Samarin, https://github.com/eboyjr\r\n * License: X11/MIT\r\n *   See LICENSE.md\r\n */\r\n\r\n/*global self, unescape */\r\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\r\n plusplus: true */\r\n\r\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */\r\n\r\n(function (view) {\r\n    \"use strict\";\r\n\r\n    view.URL = view.URL || view.webkitURL;\r\n\r\n    if (view.Blob && view.URL) {\r\n        try {\r\n            new Blob;\r\n            return;\r\n        } catch (e) {}\r\n    }\r\n\r\n    // Internally we use a BlobBuilder implementation to base Blob off of\r\n    // in order to support older browsers that only have BlobBuilder\r\n    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {\r\n            var\r\n                get_class = function(object) {\r\n                    return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];\r\n                }\r\n                , FakeBlobBuilder = function BlobBuilder() {\r\n                    this.data = [];\r\n                }\r\n                , FakeBlob = function Blob(data, type, encoding) {\r\n                    this.data = data;\r\n                    this.size = data.length;\r\n                    this.type = type;\r\n                    this.encoding = encoding;\r\n                }\r\n                , FBB_proto = FakeBlobBuilder.prototype\r\n                , FB_proto = FakeBlob.prototype\r\n                , FileReaderSync = view.FileReaderSync\r\n                , FileException = function(type) {\r\n                    this.code = this[this.name = type];\r\n                }\r\n                , file_ex_codes = (\r\n                    \"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \"\r\n                    + \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\"\r\n                ).split(\" \")\r\n                , file_ex_code = file_ex_codes.length\r\n                , real_URL = view.URL || view.webkitURL || view\r\n                , real_create_object_URL = real_URL.createObjectURL\r\n                , real_revoke_object_URL = real_URL.revokeObjectURL\r\n                , URL = real_URL\r\n                , btoa = view.btoa\r\n                , atob = view.atob\r\n\r\n                , ArrayBuffer = view.ArrayBuffer\r\n                , Uint8Array = view.Uint8Array\r\n                ;\r\n            FakeBlob.fake = FB_proto.fake = true;\r\n            while (file_ex_code--) {\r\n                FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;\r\n            }\r\n            if (!real_URL.createObjectURL) {\r\n                URL = view.URL = {};\r\n            }\r\n            URL.createObjectURL = function(blob) {\r\n                var\r\n                    type = blob.type\r\n                    , data_URI_header\r\n                    ;\r\n                if (type === null) {\r\n                    type = \"application/octet-stream\";\r\n                }\r\n                if (blob instanceof FakeBlob) {\r\n                    data_URI_header = \"data:\" + type;\r\n                    if (blob.encoding === \"base64\") {\r\n                        return data_URI_header + \";base64,\" + blob.data;\r\n                    } else if (blob.encoding === \"URI\") {\r\n                        return data_URI_header + \",\" + decodeURIComponent(blob.data);\r\n                    } if (btoa) {\r\n                        return data_URI_header + \";base64,\" + btoa(blob.data);\r\n                    } else {\r\n                        return data_URI_header + \",\" + encodeURIComponent(blob.data);\r\n                    }\r\n                } else if (real_create_object_URL) {\r\n                    return real_create_object_URL.call(real_URL, blob);\r\n                }\r\n            };\r\n            URL.revokeObjectURL = function(object_URL) {\r\n                if (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {\r\n                    real_revoke_object_URL.call(real_URL, object_URL);\r\n                }\r\n            };\r\n            FBB_proto.append = function(data/*, endings*/) {\r\n                var bb = this.data;\r\n                // decode data to a binary string\r\n                if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {\r\n                    var\r\n                        str = \"\"\r\n                        , buf = new Uint8Array(data)\r\n                        , i = 0\r\n                        , buf_len = buf.length\r\n                        ;\r\n                    for (; i < buf_len; i++) {\r\n                        str += String.fromCharCode(buf[i]);\r\n                    }\r\n                    bb.push(str);\r\n                } else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {\r\n                    if (FileReaderSync) {\r\n                        var fr = new FileReaderSync;\r\n                        bb.push(fr.readAsBinaryString(data));\r\n                    } else {\r\n                        // async FileReader won't work as BlobBuilder is sync\r\n                        throw new FileException(\"NOT_READABLE_ERR\");\r\n                    }\r\n                } else if (data instanceof FakeBlob) {\r\n                    if (data.encoding === \"base64\" && atob) {\r\n                        bb.push(atob(data.data));\r\n                    } else if (data.encoding === \"URI\") {\r\n                        bb.push(decodeURIComponent(data.data));\r\n                    } else if (data.encoding === \"raw\") {\r\n                        bb.push(data.data);\r\n                    }\r\n                } else {\r\n                    if (typeof data !== \"string\") {\r\n                        data += \"\"; // convert unsupported types to strings\r\n                    }\r\n                    // decode UTF-16 to binary string\r\n                    bb.push(unescape(encodeURIComponent(data)));\r\n                }\r\n            };\r\n            FBB_proto.getBlob = function(type) {\r\n                if (!arguments.length) {\r\n                    type = null;\r\n                }\r\n                return new FakeBlob(this.data.join(\"\"), type, \"raw\");\r\n            };\r\n            FBB_proto.toString = function() {\r\n                return \"[object BlobBuilder]\";\r\n            };\r\n            FB_proto.slice = function(start, end, type) {\r\n                var args = arguments.length;\r\n                if (args < 3) {\r\n                    type = null;\r\n                }\r\n                return new FakeBlob(\r\n                    this.data.slice(start, args > 1 ? end : this.data.length)\r\n                    , type\r\n                    , this.encoding\r\n                );\r\n            };\r\n            FB_proto.toString = function() {\r\n                return \"[object Blob]\";\r\n            };\r\n            FB_proto.close = function() {\r\n                this.size = this.data.length = 0;\r\n            };\r\n            return FakeBlobBuilder;\r\n        }(view));\r\n\r\n    view.Blob = function Blob(blobParts, options) {\r\n        var type = options ? (options.type || \"\") : \"\";\r\n        var builder = new BlobBuilder();\r\n        if (blobParts) {\r\n            for (var i = 0, len = blobParts.length; i < len; i++) {\r\n                builder.append(blobParts[i]);\r\n            }\r\n        }\r\n        return builder.getBlob(type);\r\n    };\r\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));\r\n","/* eslint-disable */\r\nrequire('script-loader!file-saver');\r\nrequire('./Blob');\r\nrequire('script-loader!xlsx/dist/xlsx.core.min');\r\nfunction generateArray(table) {\r\n    var out = [];\r\n    var rows = table.querySelectorAll('tr');\r\n    var ranges = [];\r\n    for (var R = 0; R < rows.length; ++R) {\r\n        var outRow = [];\r\n        var row = rows[R];\r\n        var columns = row.querySelectorAll('td');\r\n        for (var C = 0; C < columns.length; ++C) {\r\n            var cell = columns[C];\r\n            var colspan = cell.getAttribute('colspan');\r\n            var rowspan = cell.getAttribute('rowspan');\r\n            var cellValue = cell.innerText;\r\n            if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue;\r\n\r\n            //Skip ranges\r\n            ranges.forEach(function (range) {\r\n                if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\r\n                    for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);\r\n                }\r\n            });\r\n\r\n            //Handle Row Span\r\n            if (rowspan || colspan) {\r\n                rowspan = rowspan || 1;\r\n                colspan = colspan || 1;\r\n                ranges.push({s: {r: R, c: outRow.length}, e: {r: R + rowspan - 1, c: outRow.length + colspan - 1}});\r\n            }\r\n            ;\r\n\r\n            //Handle Value\r\n            outRow.push(cellValue !== \"\" ? cellValue : null);\r\n\r\n            //Handle Colspan\r\n            if (colspan) for (var k = 0; k < colspan - 1; ++k) outRow.push(null);\r\n        }\r\n        out.push(outRow);\r\n    }\r\n    return [out, ranges];\r\n};\r\n\r\nfunction datenum(v, date1904) {\r\n    if (date1904) v += 1462;\r\n    var epoch = Date.parse(v);\r\n    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n}\r\n\r\nfunction sheet_from_array_of_arrays(data, opts) {\r\n    var ws = {};\r\n    var range = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0}};\r\n    for (var R = 0; R != data.length; ++R) {\r\n        for (var C = 0; C != data[R].length; ++C) {\r\n            if (range.s.r > R) range.s.r = R;\r\n            if (range.s.c > C) range.s.c = C;\r\n            if (range.e.r < R) range.e.r = R;\r\n            if (range.e.c < C) range.e.c = C;\r\n            var cell = {v: data[R][C]};\r\n            if (cell.v == null) continue;\r\n            var cell_ref = XLSX.utils.encode_cell({c: C, r: R});\r\n\r\n            if (typeof cell.v === 'number') cell.t = 'n';\r\n            else if (typeof cell.v === 'boolean') cell.t = 'b';\r\n            else if (cell.v instanceof Date) {\r\n                cell.t = 'n';\r\n                cell.z = XLSX.SSF._table[14];\r\n                cell.v = datenum(cell.v);\r\n            }\r\n            else cell.t = 's';\r\n\r\n            ws[cell_ref] = cell;\r\n        }\r\n    }\r\n    if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);\r\n    return ws;\r\n}\r\n\r\nfunction Workbook() {\r\n    if (!(this instanceof Workbook)) return new Workbook();\r\n    this.SheetNames = [];\r\n    this.Sheets = {};\r\n}\r\n\r\nfunction s2ab(s) {\r\n    var buf = new ArrayBuffer(s.length);\r\n    var view = new Uint8Array(buf);\r\n    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\r\n    return buf;\r\n}\r\n\r\nexport function export_table_to_excel(id) {\r\n    var theTable = document.getElementById(id);\r\n    console.log('a')\r\n    var oo = generateArray(theTable);\r\n    var ranges = oo[1];\r\n\r\n    /* original data */\r\n    var data = oo[0];\r\n    var ws_name = \"SheetJS\";\r\n    console.log(data);\r\n\r\n    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);\r\n\r\n    /* add ranges to worksheet */\r\n    // ws['!cols'] = ['apple', 'banan'];\r\n    ws['!merges'] = ranges;\r\n\r\n    /* add worksheet to workbook */\r\n    wb.SheetNames.push(ws_name);\r\n    wb.Sheets[ws_name] = ws;\r\n\r\n    var wbout = XLSX.write(wb, {bookType: 'xlsx', bookSST: false, type: 'binary'});\r\n\r\n    saveAs(new Blob([s2ab(wbout)], {type: \"application/octet-stream\"}), \"test.xlsx\")\r\n}\r\n\r\nfunction formatJson(jsonData) {\r\n    console.log(jsonData)\r\n}\r\nexport function export_json_to_excel(th, jsonData, defaultTitle) {\r\n\r\n    /* original data */\r\n\r\n    var data = jsonData;\r\n    data.unshift(th);\r\n    var ws_name = \"SheetJS\";\r\n\r\n    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);\r\n\r\n\r\n    /* add worksheet to workbook */\r\n    wb.SheetNames.push(ws_name);\r\n    wb.Sheets[ws_name] = ws;\r\n\r\n    var wbout = XLSX.write(wb, {bookType: 'xlsx', bookSST: false, type: 'binary'});\r\n    var title = defaultTitle || '列表'\r\n    saveAs(new Blob([s2ab(wbout)], {type: \"application/octet-stream\"}), title + \".xlsx\")\r\n}\r\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrFA;AA6BA;AA1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}